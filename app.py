#Giao di·ªán gradio
# 1. Import th∆∞ vi·ªán
import os
import cv2
import joblib
import gradio as gr
import numpy as np
from skimage.feature import hog

# D·ªØ li·ªáu v·ªÅ c√°c lo·∫°i r√°c v√† c√°ch x·ª≠ l√Ω
type_and_method = {
    # Nh√≥m V√¥ c∆° (Inorganic)
    "build_matierial": ["Inorganic (V√¥ c∆°)", "V·∫≠t li·ªáu x√¢y d·ª±ng nh∆∞ g·∫°ch, v·ªØa, b√™ t√¥ng c√≥ th·ªÉ ƒë∆∞·ª£c t√°i ch·∫ø ƒë·ªÉ san l·∫•p. Kim lo·∫°i n√™n ƒë∆∞·ª£c b√°n cho c∆° s·ªü ph·∫ø li·ªáu."],
    "clothing": ["Inorganic (V√¥ c∆°)", "Qu·∫ßn √°o c√≤n t·ªët: Quy√™n g√≥p t·ª´ thi·ªán.\nQu·∫ßn √°o h·ªèng: T√°i ch·∫ø th√†nh gi·∫ª lau, v·∫≠t li·ªáu c√°ch √¢m ho·∫∑c b·ªè v√†o th√πng r√°c v√¥ c∆°."],
    "cloth_dphuc": ["Inorganic (V√¥ c∆°)", "ƒê·ªìng ph·ª•c c≈©/h·ªèng c√≥ th·ªÉ ƒë∆∞·ª£c t√°i ch·∫ø. N·∫øu kh√¥ng, b·ªè v√†o th√πng r√°c v√¥ c∆°."],
    "electronic": ["Inorganic (V√¥ c∆°)", "R√°c th·∫£i ƒëi·ªán t·ª≠ nguy h·∫°i. Kh√¥ng v·ª©t v√†o r√°c th∆∞·ªùng. Mang ƒë·∫øn c√°c ƒëi·ªÉm thu h·ªìi r√°c th·∫£i ƒëi·ªán t·ª≠ t·∫°i si√™u th·ªã, trung t√¢m b·∫£o h√†nh."],
    "light_bulb": ["Inorganic (V√¥ c∆°)", "B√≥ng ƒë√®n hu·ª≥nh quang/compact ch·ª©a th·ªßy ng√¢n, c·∫ßn ƒë∆∞·ª£c x·ª≠ l√Ω ri√™ng nh∆∞ ch·∫•t th·∫£i nguy h·∫°i. B√≥ng LED c√≥ th·ªÉ t√°i ch·∫ø kim lo·∫°i v√† nh·ª±a."],
    "medical_trash": ["Inorganic (V√¥ c∆°)", "Ch·∫•t th·∫£i y t·∫ø c·ª±c k·ª≥ nguy h·∫°i. Ph·∫£i ƒë∆∞·ª£c thu gom v√† x·ª≠ l√Ω theo quy ƒë·ªãnh c·ªßa c∆° s·ªü y t·∫ø."],
    "Rubber_wheels": ["Inorganic (V√¥ c∆°)", "L·ªëp xe c√≥ th·ªÉ ƒë∆∞·ª£c t√°i ch·∫ø th√†nh cao su t√°i sinh ƒë·ªÉ l√†m th·∫£m, s√¢n ch∆°i. Li√™n h·ªá c√°c c∆° s·ªü t√°i ch·∫ø chuy√™n nghi·ªáp."],
    "table_chair": ["Inorganic (V√¥ c∆°)", "N·∫øu c√≤n s·ª≠ d·ª•ng ƒë∆∞·ª£c, h√£y thanh l√Ω ho·∫∑c quy√™n g√≥p. N·∫øu h·ªèng, ph√¢n lo·∫°i c√°c b·ªô ph·∫≠n (g·ªó, kim lo·∫°i, nh·ª±a) ƒë·ªÉ t√°i ch·∫ø ho·∫∑c b·ªè ƒëi."],
    "Fmask_Tbrush": ["Inorganic (V√¥ c∆°)", "Kh·∫©u trang, b√†n ch·∫£i ƒë√°nh rƒÉng l√† r√°c th·∫£i v√¥ c∆°, kh√¥ng t√°i ch·∫ø ƒë∆∞·ª£c. B·ªè v√†o th√πng r√°c v√¥ c∆°."],
    "pen": ["Inorganic (V√¥ c∆°)", "B√∫t vi·∫øt l√† r√°c th·∫£i v√¥ c∆°, kh√¥ng t√°i ch·∫ø ƒë∆∞·ª£c. B·ªè v√†o th√πng r√°c v√¥ c∆°."],
    "plastic_non_re": ["Inorganic (V√¥ c∆°)", "C√°c lo·∫°i nh·ª±a kh√¥ng th·ªÉ t√°i ch·∫ø (nh·ª±a d√πng m·ªôt l·∫ßn b·∫©n, ƒë·ªì ch∆°i ph·ª©c h·ª£p). B·ªè v√†o th√πng r√°c v√¥ c∆°."],
    "Thermos": ["Inorganic (V√¥ c∆°)", "B√¨nh gi·ªØ nhi·ªát h·ªèng l√† r√°c th·∫£i v√¥ c∆°. B·ªè v√†o th√πng r√°c v√¥ c∆°."],

    # Nh√≥m H·ªØu c∆° (Organic)
    "oil_cook": ["Organic (H·ªØu c∆°)", "Kh√¥ng ƒë·ªï tr·ª±c ti·∫øp xu·ªëng c·ªëng. Gom l·∫°i v√†o chai/l·ªç k√≠n v√† mang ƒë·∫øn c√°c ƒëi·ªÉm thu gom d·∫ßu ƒÉn ƒë√£ qua s·ª≠ d·ª•ng ƒë·ªÉ t√°i ch·∫ø th√†nh nhi√™n li·ªáu sinh h·ªçc."],
    "flower": ["Organic (H·ªØu c∆°)", "C√≥ th·ªÉ ·ªß l√†m ph√¢n compost t·∫°i nh√† ho·∫∑c b·ªè v√†o th√πng r√°c h·ªØu c∆°."],
    "fruit": ["Organic (H·ªØu c∆°)", "V·ªè v√† ph·∫ßn th·ª´a c·ªßa tr√°i c√¢y l√† r√°c h·ªØu c∆°. C√≥ th·ªÉ ·ªß l√†m ph√¢n compost ho·∫∑c b·ªè v√†o th√πng r√°c h·ªØu c∆°."],
    "meat": ["Organic (H·ªØu c∆°)", "Th·ªãt v√† x∆∞∆°ng th·ª´a l√† r√°c h·ªØu c∆°. B·ªè v√†o th√πng r√°c h·ªØu c∆°."],
    "pencil": ["Organic (H·ªØu c∆°)", "V·ªè b√∫t ch√¨ (g·ªó) c√≥ th·ªÉ ph√¢n h·ªßy h·ªØu c∆°. B·ªè v√†o th√πng r√°c h·ªØu c∆°."],
    "plant": ["Organic (H·ªØu c∆°)", "L√° c√¢y, c√†nh c√¢y nh·ªè l√† r√°c h·ªØu c∆°. C√≥ th·ªÉ ·ªß l√†m ph√¢n compost ho·∫∑c b·ªè v√†o th√πng r√°c h·ªØu c∆°."],

    # Nh√≥m T√°i ch·∫ø (Recyclable)
    "milk_box": ["Recyclable (T√°i ch·∫ø)", "X·∫£ s·∫°ch, l√†m kh√¥ v√† d·∫πp l·∫°i. ƒêem ƒë·∫øn c√°c ƒëi·ªÉm thu gom v·ªè h·ªôp gi·∫•y chuy√™n d·ª•ng (v√≠ d·ª•: c·ªßa Tetra Pak) ƒë·ªÉ t√°i ch·∫ø."],
    "cardboard": ["Recyclable (T√°i ch·∫ø)", "L√†m s·∫°ch, l√†m ph·∫≥ng v√† b·ªè v√†o th√πng r√°c t√°i ch·∫ø ho·∫∑c b√°n cho c∆° s·ªü ph·∫ø li·ªáu."],
    "glass": ["Recyclable (T√°i ch·∫ø)", "L√†m s·∫°ch v√† b·ªè v√†o th√πng r√°c t√°i ch·∫ø. C·∫©n th·∫≠n ƒë·ªÉ kh√¥ng g√¢y nguy hi·ªÉm."],
    "metal": ["Recyclable (T√°i ch·∫ø)", "L√†m s·∫°ch v√† b·ªè v√†o th√πng r√°c t√°i ch·∫ø ho·∫∑c b√°n cho c∆° s·ªü ph·∫ø li·ªáu."],
    "paper": ["Recyclable (T√°i ch·∫ø)", "Gi·ªØ kh√¥ r√°o, kh√¥ng d√≠nh d·∫ßu m·ª°. B·ªè v√†o th√πng r√°c t√°i ch·∫ø ho·∫∑c b√°n cho c∆° s·ªü ph·∫ø li·ªáu."],
    "Plastic": ["Recyclable (T√°i ch·∫ø)", "L√†m s·∫°ch, lo·∫°i b·ªè nh√£n n·∫øu c√≥ th·ªÉ. B·ªè v√†o th√πng r√°c t√°i ch·∫ø c√°c lo·∫°i nh·ª±a c√≥ k√Ω hi·ªáu t√°i ch·∫ø (PET, HDPE,...)."]
}

# 2. Load model, scaler, v√† label_map
MODEL_PATH = "waste_classifier.pkl"
if not os.path.exists(MODEL_PATH):
    raise FileNotFoundError(f"‚ùå Kh√¥ng t√¨m th·∫•y t·ªáp model t·∫°i: {MODEL_PATH}")
svm_model, scaler, label_map = joblib.load(MODEL_PATH)


# 3. HOG (tr√≠ch xu·∫•t ƒë·∫∑c tr∆∞ng)
def extract_hog_features(image_path, size=(128, 128)): #Th√¥ng s·ªë resize c·ªßa ·∫£nh (c√†ng cao c√†ng ch√≠nh x√°c)
    img = cv2.imread(image_path, cv2.IMREAD_GRAYSCALE)
    if img is None:
        raise ValueError(f"Kh√¥ng th·ªÉ ƒë·ªçc ·∫£nh: {image_path}")
    img = cv2.resize(img, size)
    features = hog(img,
                   orientations=9,
                   pixels_per_cell=(8, 8),
                   cells_per_block=(2, 2),
                   block_norm='L2-Hys',
                   visualize=False,
                   feature_vector=True)
    return features

# 4. H√†m d·ª± ƒëo√°n
def predict_image(image):
    features = extract_hog_features(image)
    features = scaler.transform([features])  # Chu·∫©n h√≥a nh∆∞ l√∫c train

    prediction = svm_model.predict(features)[0]
    label_name = label_map[prediction]

    waste_type, guide = type_and_method.get(label_name, ["Kh√¥ng r√µ", "Ch∆∞a c√≥ h∆∞·ªõng d·∫´n."])

    # Th√™m bi·ªÉu t∆∞·ª£ng cho ƒë·∫πp
    if "h·ªØu c∆°" in waste_type.lower():
        waste_type_display = waste_type + " üåø"
    elif "t√°i ch·∫ø" in waste_type.lower():
        waste_type_display = waste_type + " ‚ôªÔ∏è"
    else:
        waste_type_display = waste_type + " üóëÔ∏è"

    return image, label_name, waste_type_display, guide


# 5. X√¢y d·ª±ng giao di·ªán Gradio
demo = gr.Interface(
    fn=predict_image,
    inputs=gr.Image(
        type="pil",
        label="üì∏ T·∫£i ·∫£nh ho·∫∑c ch·ª•p b·∫±ng webcam",
        sources=["upload", "clipboard", "webcam"]
    ),
    outputs=[
        gr.Image(label="üì∑ ·∫¢nh b·∫°n ƒë√£ ƒë∆∞a v√†o"),
        gr.Textbox(label="üîñ T√™n lo·∫°i r√°c (d·ª± ƒëo√°n)"),
        gr.Textbox(label="‚ôªÔ∏è Nh√≥m r√°c", interactive=False),
        gr.Textbox(label="üìò H∆∞·ªõng d·∫´n x·ª≠ l√Ω", lines=5, interactive=False)
    ],
    title="‚ôªÔ∏è H·ªá th·ªëng ph√¢n lo·∫°i r√°c th√¥ng minh",
    description="T·∫£i ·∫£nh ho·∫∑c ch·ª•p ·∫£nh r√°c ƒë·ªÉ AI nh·∫≠n di·ªán lo·∫°i r√°c v√† ƒë·ªÅ xu·∫•t c√°ch x·ª≠ l√Ω ph√π h·ª£p.",
    theme="soft",
    allow_flagging="never"
)

# Run
if __name__ == "__main__":
    demo.launch()
